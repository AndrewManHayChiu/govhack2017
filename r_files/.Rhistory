temp <- temp[, .(user_id, 2, 3)]
temp
kmeans <- kmeans(temp, centers = 5)
kmeans
temp <- orders[, .(user_id, order_number, days_since_prior_order)]
temp <- spread(temp, key = order_number, value = days_since_prior_order)
temp <- temp[, .(user_id, "2", "3")]
temp
temp <- orders[, .(user_id, order_number, days_since_prior_order)]
temp <- spread(temp, key = order_number, value = days_since_prior_order)
temp
str(temp)
temp$2
temp[, 2:3]
temp[2:3, ]
temp[2:3, 2]
?data.table
temp
temp[, 2]
temp[2, ]
temp[2, ]
temp[2, 1]
temp[2, 2, with = F]
temp[, 2, with = F]
temp[, 3, with = F]
temp <- temp[, .(user_id, 2, 3), with = FALSE]
temp
temp <- temp[, .(user_id, "2", "3"), with = FALSE]
temp <- temp[, .("user_id", "2", "3"), with = FALSE]
temp <- temp[, 3:4, with = FALSE]
temp
kmeans <- kmeans(temp, centers = 5)
kmeans
temp <- orders[, .(user_id, order_number, days_since_prior_order)]
temp <- spread(temp, key = order_number, value = days_since_prior_order)
temp <- temp[, 3:5, with = FALSE]
kmeans <- kmeans(temp, centers = 5)
kmeans
temp2 <- temp[, 3:10, with = FALSE]
temp <- spread(temp, key = order_number, value = days_since_prior_order)
temp <- orders[, .(user_id, order_number, days_since_prior_order)]
temp <- spread(temp, key = order_number, value = days_since_prior_order)
temp2 <- temp[, 3:10, with = FALSE]
kmeans <- kmeans(temp2, centers = 5)
temp2 <- temp[, 3:6, with = FALSE]
kmeans <- kmeans(temp2, centers = 5)
temp2 <- temp[, 3:5, with = FALSE]
kmeans <- kmeans(temp2, centers = 5)
length(kmeans)
length(kmeans$cluster)
nrow(orders)
nrow(temp)
cluster <- data.frame(user_id = temp$user_id,
cluster = kmeans$cluster)
cluster
cluster <- data.table(cluster)
orders <- cluster[orders, on = user_id]
orders <- cluster[orders, by = user_id]
cluster
orders
orders <- cluster[orders, on = "user_id"]
orders
ggplot(orders[user_id %in% sample,], aes(x = order_number, y = days_since_prior_order)) +
geom_point(fill = cluster) +
geom_smooth() +
theme_minimal() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x = "Order Number",
y = "Days Since Prior Order",
title = "Days since prior order") +
annotate("text", x = 85, y = 10,
label = "People who order frequently order more")
ggplot(orders[user_id %in% sample,], aes(x = order_number,
y = days_since_prior_order,
colour = cluster)) +
geom_point() +
geom_smooth() +
theme_minimal() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x = "Order Number",
y = "Days Since Prior Order",
title = "Days since prior order") +
annotate("text", x = 85, y = 10,
label = "People who order frequently order more")
ggplot(orders[user_id %in% sample,], aes(x = order_number, y = days_since_prior_order)) +
geom_point() +
geom_smooth() +
theme_minimal() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x = "Order Number",
y = "Days Since Prior Order",
title = "Days since prior order") +
annotate("text", x = 85, y = 10,
label = "People who order frequently order more")
set.seed(20170527)
sample <- sample(unique(orders$user_id), 200)
ggplot(orders[user_id %in% sample,], aes(x = order_number,
y = days_since_prior_order,
colour = cluster)) +
geom_point() +
geom_smooth() +
theme_minimal() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x = "Order Number",
y = "Days Since Prior Order",
title = "Days since prior order") +
annotate("text", x = 85, y = 10,
label = "People who order frequently order more")
ggplot(orders[user_id %in% sample,], aes(x = order_number,
y = days_since_prior_order,
colour = as.factor(cluster))) +
geom_point() +
geom_smooth() +
theme_minimal() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x = "Order Number",
y = "Days Since Prior Order",
title = "Days since prior order") +
annotate("text", x = 85, y = 10,
label = "People who order frequently order more")
ggplot(orders[user_id %in% sample,], aes(x = order_number,
y = days_since_prior_order,
colour = as.factor(cluster))) +
geom_point() +
# geom_smooth() +
theme_minimal() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x = "Order Number",
y = "Days Since Prior Order",
title = "Days since prior order") +
annotate("text", x = 85, y = 10,
label = "People who order frequently order more")
orders
ggplot(orders[user_id %in% sample,], aes(x = order_number,
y = days_since_prior_order,
colour = as.factor(cluster))) +
# geom_point() +
geom_jitter() +
# geom_smooth() +
theme_minimal() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x = "Order Number",
y = "Days Since Prior Order",
title = "Days since prior order") +
annotate("text", x = 85, y = 10,
label = "People who order frequently order more")
ggplot(orders[user_id %in% sample,], aes(x = order_number,
y = days_since_prior_order,
colour = as.factor(cluster))) +
# geom_point() +
geom_jitter() +
# geom_smooth() +
theme_minimal() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
# legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x = "Order Number",
y = "Days Since Prior Order",
title = "Days since prior order") +
annotate("text", x = 85, y = 10,
label = "People who order frequently have more orders")
temp2 <- temp[, 3:10, with = FALSE]
kmeans <- kmeans(na.omit(temp2), centers = 5)
kmeans
cluster <- data.frame(user_id = temp$user_id,
cluster = kmeans$cluster)
cluster <- data.frame(user_id = temp$user_id,
cluster = kmeans$cluster)
cluster <- data.frame(user_id = temp$user_id,
cluster = kmeans$cluster)
length*temp$user_id)
length(temp$user_id)
length(kmeans$cluster)
temp
library(rsconnect)
rsconnect::setAccountInfo(name='chiumanhay',
token='23E50333D072FD52B5EED2A51A361D96',
secret='<SECRET>')
rsconnect::setAccountInfo(name='chiumanhay',
token='23E50333D072FD52B5EED2A51A361D96',
secret='3hD7sQtSscMaDMsEV543VeaQXkejUcGNiacFT/RC')
library(RForecastio)
library(Rforecastio)
install.packages("Rforecastio")
library(Rforecastio)      # forecast weather data
library(weatherr)
install.packages("weatherr")
install.packages("darksky")
library(darksky)
library(leaflet)          # Map
install.packages('leaflet')
library(shiny)
library(shinydashboard)
library(dplyr)            # Data manipulation
library(ggplot2)          # Visualisations
library(plotly)           # Visualisations - interactive
library(leaflet)          # Map
library(darksky)
library(lubridate)        # Manipulate date variables
library(plotly)           # Another interactive graphics library
library(weatherr)      # Get weather forecast data
library(tidyjson)
install.packages("tidyjson")
install.packages("tidyjson")
library(tidyjson)
library(tidyjson)
people <- '
[
{
"name": "bob",
"age": 32
},
{
"name": "susan",
"age": 54
}
]'
people
people %>%                  # %>% is the magrittr pipeline operator
gather_array %>%          # gather (stack) the array by index
spread_values(            # spread (widen) values to widen the data.frame
name = jstring("name"), # value of "name" becomes a character column
age = jnumber("age")    # value of "age" becomes a numeric column
)
library(dplyr)
people %>%                  # %>% is the magrittr pipeline operator
gather_array %>%          # gather (stack) the array by index
spread_values(            # spread (widen) values to widen the data.frame
name = jstring("name"), # value of "name" becomes a character column
age = jnumber("age")    # value of "age" becomes a numeric column
)
library(jsonlite)
jsonlite::fromJSON(people, simplifyDataFrame = TRUE)
purch_json <- '
[
{
"name": "bob",
"purchases": [
{
"date": "2014/09/13",
"items": [
{"name": "shoes", "price": 187},
{"name": "belt", "price": 35}
]
}
]
},
{
"name": "susan",
"purchases": [
{
"date": "2014/10/01",
"items": [
{"name": "dress", "price": 58},
{"name": "bag", "price": 118}
]
},
{
"date": "2015/01/03",
"items": [
{"name": "shoes", "price": 115}
]
}
]
}
]'
purch_items <- purch_json %>%
gather_array %>%
spread_values(person = jstring("name")) %>%
enter_object("purchases") %>%
gather_array %>%
spread_values(purchase.date = jstring("date")) %>%
enter_object("items") %>%
gather_array %>%
spread_values(
item.name = jstring("name"),
item.price = jnumber("price")
) %>%
select(person, purchase.date, item.name, item.price)
purch_items
library(ggplot2)
ggplot(purch_items,
aes(x = person)) +
geom_bar()
setwd("C:/Users/Chiu Man Hay/Downloads")
data <- read_json(fileName)
fileName <- "anti-money-laundering-and-counter-terrorism-financing.json"
data <- read_json(fileName)
data
data <- as.tbl_json(data)
data
class(data)
data <- read_json(fileName)
class(data)
attr(data, "JSON")
fileName <- "./data/anti-money-laundering-and-counter-terrorism-financing.json"
data <- read_json(fileName)
fileName <- "/data/anti-money-laundering-and-counter-terrorism-financing.json"
setwd("~/GitHub/govhack2017/r_files")
fileName <- "./data/anti-money-laundering-and-counter-terrorism-financing.json"
data <- read_json(fileName)
fileName <- "~/data/anti-money-laundering-and-counter-terrorism-financing.json"
data <- read_json(fileName)
fileName <- "../data/anti-money-laundering-and-counter-terrorism-financing.json"
data <- read_json(fileName)
data %>% gather_array
data %>%
gather_array %>%
spread_values(
properties = jstring("properties")
)
fileName <- "../data/demonstration.json"
data <- read_json(fileName)
fileName <- "../data/demonstration.json"
data <- read_json(fileName)
data
data %>%
gather_array %>%
spread_values(
properties = jstring("properties")
)
attr(data, "JSON")
json_types(data)
data %>% json_types
data %>% gather_keys()
data %>% spread_values()
data %>% enter_object()
data %>% json_lengths()
data %>% json_types
data %>%
gather_keys() %>%
json_types
data %>%
gather_array %>%
json_types
data %>%
gather_array() %>%
json_types
data %>% json_lengths()
data %>% json_types
data %>%
spread_values(
type = jstring("type")
)
data %>%
spread_values(
type = jstring("type"),
description = jstring("description")
)
data %>%
spread_values(
description = jstring("description")
)
data %>%
spread_values(
properties = jstring("properties", "name")
)
data %>%
spread_values(
properties = jstring("properties")
)
data %>%
gather_keys() %>%
append_values_string()
data %>%
spread_values(properties = jstring("properties")) %>%
enter_object("escalator") %>%
gather_array()
data %>%
enter_object("escalator") %>%
gather_array()
data %>%
enter_object("escalator")
data %>% json_lengths()
data %>%
gather_keys() %>%
json_lengths()
data %>%
spread_values(properties = jstring("properties")) %>%
enter_object("escalator") %>%
gather_array
data %>% prettify
library(jsonlite)
data %>% prettify
prettify(data)[1]
prettify(data)[[1]]
prettify(data)[[2]]
prettify(data)[[1]][1]
data %>%
gather_keys
data %>%
gather_keys %>%
json_types
data %>%
gather_keys %>%
json_types %>%
json_lengths
data %>%
enter_object("properties") %>%
json_types
data %>%
enter_object("properties") %>%
json_types %>%
json_lengths
data %>%
gather_keys %>%
enter_object("properties") %>%
json_types
data %>%
gather_keys %>%
enter_object("properties") %>%
json_types %>%
json_lengths
data %>%
spread_values(properties = jstring("properties")) %>%
enter_object("properties") %>%
json_types
shiny::runApp('checkbox')
runApp('checkbox')
runApp('checkbox')
runApp('checkbox')
plot(1)
runApp('checkbox')
runApp('radioButtonTest2')
runApp('checkbox')
runApp('checkbox')
runApp('checkbox')
runApp('checkbox')
runApp('checkbox')
library(plotly)
library(dplyr)
df <- data.frame(comp = c("Complete", "Incomplete"),
value = c(.2, .8))
plot_ly(df,
labels = ~comp,
values = ~value) %>%
add_pie(hole = 0.5) %>%
layout(title = "Regulatory Compliance",
showlegend = F,
xaxis = list(showgrid = F, zeroline = F, showticklabels = F),
yaxis = list(showgrid = F, zeroline = F, showticklabels = F))
p <- mtcars %>%
group_by(manuf) %>%
summarize(count = n()) %>%
plot_ly(labels = ~manuf, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
mtcars$manuf <- sapply(strsplit(rownames(mtcars), " "), "[[", 1)
p <- mtcars %>%
group_by(manuf) %>%
summarize(count = n()) %>%
plot_ly(labels = ~manuf, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
install.packages("plotly")
install.packages("plotly")
library(plotly)
library(dplyr)
df <- data.frame(comp = c("Complete", "Incomplete"),
value = c(.2, .8))
plot_ly(df,
labels = ~comp,
values = ~value) %>%
add_pie(hole = 0.5) %>%
layout(title = "Regulatory Compliance",
showlegend = F,
xaxis = list(showgrid = F, zeroline = F, showticklabels = F),
yaxis = list(showgrid = F, zeroline = F, showticklabels = F))
library(plotly)
library(dplyr)
install.packages("ggplot2")
library(plotly)
library(ggplot2)
library(plotly)
library(namespace)
install.packages("namespace")
library(namespace)
library(plotly)
